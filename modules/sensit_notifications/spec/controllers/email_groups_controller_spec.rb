require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Settings::EmailGroupsController do
  login_user
  it { should filter_param(:password)}
  it { should filter_param(:password_confirmation)}

  # This should return the minimal set of attributes required to create a valid
  # EmailGroup. As you add validations to EmailGroup, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {name: "MyEmailGroup", :addresses_sentence => "foo@bar.com, foo@example.com, bar@foo.com"}
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EmailGroupsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all email_groups as @email_groups" do
      email = FactoryGirl.create(:email_group)
      get :index, {}, valid_session
      assigns(:email_groups).should eq([email])
    end
  end

  describe "GET show" do
    it "assigns the requested email_group as @email_group" do
      email = FactoryGirl.create(:email_group)
      get :show, {:id => email.to_param}, valid_session
      assigns(:email_group).should eq(email)
    end
  end

  describe "GET new" do
    it "assigns a new email_group as @email_group" do
      get :new, {}, valid_session
      assigns(:email_group).should be_a_new(EmailGroup)
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new EmailGroup" do
        expect {
          post :create, {:email_group => valid_attributes}, valid_session
        }.to change(EmailGroup, :count).by(1)
      end

      it "assigns a newly created email_group as @email_group" do
        post :create, {:email_group => valid_attributes}, valid_session
        assigns(:email_group).should be_a(EmailGroup)
        assigns(:email_group).should be_persisted
      end

      it "redirects to the created email_group" do
        post :create, {:email_group => valid_attributes}, valid_session
        response.should redirect_to(email_groups_url)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved email_group as @email_group" do
        # Trigger the behavior that occurs when invalid params are submitted
        EmailGroup.any_instance.stub(:save).and_return(false)
        post :create, {:email_group => {}}, valid_session
        assigns(:email_group).should be_a_new(EmailGroup)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        EmailGroup.any_instance.stub(:save).and_return(false)
        post :create, {:email_group => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    context "with valid params" do
      it "updates the requested email_group" do
        email = FactoryGirl.create(:email_group)
        # Assuming there are no other email_groups in the database, this
        # specifies that the EmailGroup created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        EmailGroup.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => email.to_param, :email_group => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested email_group as @email_group" do
        email = FactoryGirl.create(:email_group)
        put :update, {:id => email.to_param, :email_group => valid_attributes}, valid_session
        assigns(:email_group).should eq(email)
      end

      it "redirects to the email_groups page" do
        email = FactoryGirl.create(:email_group)
        put :update, {:id => email.to_param, :email_group => valid_attributes}, valid_session
        response.should redirect_to(email_groups_url)
      end
    end

    context "with invalid params" do
      it "assigns the email_group as @email_group" do
        email = FactoryGirl.create(:email_group)
        # Trigger the behavior that occurs when invalid params are submitted
        EmailGroup.any_instance.stub(:save).and_return(false)
        put :update, {:id => email.to_param, :email_group => {}}, valid_session
        assigns(:email_group).should eq(email)
      end

      it "re-renders the 'edit' template" do
        email = FactoryGirl.create(:email_group)
        # Trigger the behavior that occurs when invalid params are submitted
        EmailGroup.any_instance.stub(:save).and_return(false)
        put :update, {:id => email.to_param, :email_group => {}}, valid_session
        response.should render_template("show")
      end
    end
  end
  
  describe "PUT multiple" do
    before(:each) do
      @email_groups = []
      3.times { |i| @email_groups << FactoryGirl.create(:email_group)}
      controller.stub(:flash_notice).with(@email_groups, "destroy").and_return("flash message for destroy")    
    end
    context "with remove as commit" do
      it "destroys all the email_groups in the list of ids" do
        expect {
          put :multiple, {:email_group_ids => @email_groups.map(&:to_param), :remove => 'remove'}, valid_session
        }.to change(EmailGroup, :count).by(-3)
      end
      
      it "redirects to the email_groups list" do
        put :multiple, {:email_group_ids => @email_groups.map(&:to_param), :remove => 'remove'}, valid_session
        response.should redirect_to(email_groups_url)
      end
      
    end
    
    context "with edit as commit" do
      
    end
  end

  describe "DELETE destroy" do
    before(:each){@factory = FactoryGirl.create(:email_group)}
    it_should_behave_like "a controller with DELETE destroy"
  end

end
