require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Sensit
  describe UsersController do

    before(:each) do
      @access_grant = FactoryGirl.create(:access_grant, resource_owner_id: @user.id, scopes: "read_any_data")
      controller.stub(:doorkeeper_token).and_return(@access_grant)
    end

    def valid_request(h = {})
      h.merge!({:use_route => :sensit_api, :format => "json", :api_version => 1})
    end
    # This should return the minimal set of attributes required to create a valid
    # Topic. As you add validations to Topic, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      {}
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # TopicsController. Be sure to keep this updated too.
    def valid_session(params = { })
      {}.merge!(params)
    end

    describe "GET show" do
      it "assigns the requested user as @user" do
        get :show, valid_request, valid_session(user_id: @user.to_param)
        assigns(:user).should eq(@user)
      end
    end
  end
end
