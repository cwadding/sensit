require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Sensit
    describe PercolatorsController do
      def valid_request(h = {})
        h.merge!({:use_route => :sensit_percolator, :format => "json", :api_version => 1})
      end
      # This should return the minimal set of attributes required to create a valid
      # ::Sensit::Topic::Percolator. As you add validations to ::Sensit::Topic::Percolator, be sure to
      # update the return value of this method accordingly.
      def valid_attributes(h={})
        { type: ELASTIC_SEARCH_INDEX_TYPE, id: "3", body: { query: { query_string: { query: 'foo' } } } }.merge!(h)
      end

      # This should return the minimal set of values that should be in the session
      # in order to pass any filters (e.g. authentication) defined in
      # ::Sensit::PercolatorsController. Be sure to keep this updated too.
      def valid_session
        {}
      end

      describe "GET show" do
        it "assigns the requested percolator as @percolator" do
          percolator = ::Sensit::Topic::Percolator.create valid_attributes
          get :show, valid_request(:id => percolator.id), valid_session
          assigns(:percolator).id.should eq(percolator.id)
        end
      end

      describe "POST create" do
        describe "with valid params" do
          it "creates a new ::Sensit::Topic::Percolator" do
            client = ::Elasticsearch::Client.new
            expect {
              post :create, valid_request(:percolator => { type: ELASTIC_SEARCH_INDEX_TYPE, :id => "mytest1", :body => {query: { query_string: { query: 'foo' } } }}), valid_session
              client.indices.refresh(:index => ELASTIC_SEARCH_INDEX_NAME)
            }.to change{::Sensit::Topic::Percolator.count({ type: ELASTIC_SEARCH_INDEX_TYPE})}.by(1)
          end

          it "assigns a newly created percolator as @percolator" do
            post :create, valid_request(:percolator => {  type: ELASTIC_SEARCH_INDEX_TYPE, :id => "mytest2", :body => {query: { query_string: { query: 'foo' } } } }), valid_session
            assigns(:percolator).should be_a(::Sensit::Topic::Percolator)
            # assigns(:percolator).should_not be_a_new_record
          end

          it "renders to the created percolator" do
            post :create, valid_request(:percolator => { type: ELASTIC_SEARCH_INDEX_TYPE, :id => "mytest3", :body => {query: { query_string: { query: 'foo' } } } }), valid_session
            response.should render_template("sensit/percolators/show")
          end
        end

        describe "with invalid params" do
          it "assigns a newly created but unsaved percolator as @percolator" do
            # Trigger the behavior that occurs when invalid params are submitted
            ::Sensit::Topic::Percolator.any_instance.stub(:save).and_return(false)
            post :create, valid_request(:percolator => { type: ELASTIC_SEARCH_INDEX_TYPE, :id => "mytest", :body => {query: { query_string: { query: 'foo' } } }  }), valid_session
            assigns(:percolator).should be_a_new(::Sensit::Topic::Percolator)
          end

          it "re-renders the 'new' template" do
            # Trigger the behavior that occurs when invalid params are submitted
            ::Sensit::Topic::Percolator.any_instance.stub(:save).and_return(false)
            post :create, valid_request(:percolator => { type: ELASTIC_SEARCH_INDEX_TYPE, :id => "mytest", :body => {query: { query_string: { query: 'foo' } } }  }), valid_session
            response.status.should == 422
          end
        end
      end

      describe "PUT update" do
        describe "with valid params" do
          it "updates the requested percolator" do
            percolator = ::Sensit::Topic::Percolator.create valid_attributes(id:4)
            # Assuming there are no other percolator_percolators in the database, this
            # specifies that the ::Sensit::Topic::Percolator created on the previous line
            # receives the :update_attributes message with whatever params are
            # submitted in the request.
            ::Sensit::Topic::Percolator.should_receive(:update).with({"id" => percolator.id, "type" => percolator.type, "body" => {"query" => { "query_string" => { "query" => 'foo' } } }  }).and_return(percolator)
            put :update, valid_request(:id => percolator.id, :percolator => { :body => {query: { query_string: { query: 'foo' } } }  }), valid_session
          end

          it "assigns the requested percolator as @percolator" do
            percolator = ::Sensit::Topic::Percolator.create valid_attributes(id:5)
            put :update, valid_request(:id => percolator.id, :percolator => { :body => {query: { query_string: { query: 'foo' } } }  }), valid_session
            assigns(:percolator).id.should == percolator.id
          end

          it "renders the percolator" do
            percolator = ::Sensit::Topic::Percolator.create valid_attributes(id:6)
            put :update, valid_request(:id => percolator.id, :percolator => { :body => {query: { query_string: { query: 'foo' } } }  }), valid_session
            response.should render_template("sensit/percolators/show")
          end
        end

        describe "with invalid params" do
          it "assigns the percolator as @percolator" do
            percolator = ::Sensit::Topic::Percolator.create valid_attributes(id:7)
            # Trigger the behavior that occurs when invalid params are submitted
            percolator.stub(:valid?).and_return(false)
            ::Sensit::Topic::Percolator.should_receive(:update).with({"id" => percolator.id, "type" => percolator.type, "body" => {"query" => { "query_string" => { "query" => 'foo' } } }  }).and_return(percolator)
            put :update, valid_request(:id => percolator.id, :percolator => { :body => {query: { query_string: { query: 'foo' } } }  } ), valid_session
            assigns(:percolator).id.should == percolator.id
          end

          it "re-renders the 'edit' template" do
            percolator = ::Sensit::Topic::Percolator.create valid_attributes(id:8)
            # Trigger the behavior that occurs when invalid params are submitted
            percolator.stub(:valid?).and_return(false)
            ::Sensit::Topic::Percolator.should_receive(:update).with({"id" => percolator.id, "type" => percolator.type, "body" => {"query" => { "query_string" => { "query" => 'foo' } } }  }).and_return(percolator)

            put :update, valid_request(:id => percolator.id, :percolator => { :body => {query: { query_string: { query: 'foo' } } }  } ), valid_session
            response.status.should == 422
          end
        end
      end

      describe "DELETE destroy" do
        it "destroys the requested percolator" do
          percolator = ::Sensit::Topic::Percolator.create valid_attributes(id:9)
          client = ::Elasticsearch::Client.new
          client.indices.refresh(:index => ELASTIC_SEARCH_INDEX_NAME)
          expect {
            delete :destroy, valid_request(:id => percolator.id), valid_session
            client.indices.refresh(:index => ELASTIC_SEARCH_INDEX_NAME)
          }.to change{::Sensit::Topic::Percolator.count({type: ELASTIC_SEARCH_INDEX_TYPE})}.by(-1)
        end

        it "redirects to the percolators list" do
          percolator = ::Sensit::Topic::Percolator.create valid_attributes(id:10)
          delete :destroy, valid_request(:id => percolator.id), valid_session
          response.status.should == 204
        end
      end

      describe ".percolator_params" do

        context "match queries" do
          context "boolean type" do
            it "no properties" do
              controller.params = {percolator: {id: 1, body: {query: {match: {message: "this is a test"}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "with operator and minimum_should_match" do
              controller.params = {percolator: {id: 1, body: {query: {match: {message: {query: "this is a test", operator: "and", minimum_should_match: 1, zero_terms_query: "all", cutoff_frequency: 0.0001}}}}}
              new_params = controller.send(:percolator_params)
            end
          end
          context "phrase type" do
            it "no properties" do
              controller.params = {percolator: {id: 1, body: {query: {match_phrase: {message: "this is a test"}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "with analyzer" do
              controller.params = {percolator: {id: 1, body: {query: {match_phrase: {message: {query: "this is a test", analyzer:"my_analyzer"}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "specifying type" do
              controller.params = {percolator: {id: 1, body: {query: {match: {message: {query: "this is a test", type: "phrase"}}}}}
              new_params = controller.send(:percolator_params)
            end
          end
          context "match phrase prefix type" do
            it "no properties" do
              controller.params = {percolator: {id: 1, body: {query: {match_phrase_prefix: {message: "this is a test"}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "with max_expansions" do
              controller.params = {percolator: {id: 1, body: {query: {match_phrase: {message: {query: "this is a test", max_expansions:10}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "specifying type" do
              controller.params = {percolator: {id: 1, body: {query: {match: {message: {query: "this is a test", type: "phrase_prefix"}}}}}
              new_params = controller.send(:percolator_params)
            end
          end   
        end

        context "multi_match queries" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {multi_match: {query: "this is a test", fields: ["subject", "message"]}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "with use_dis_max" do
              controller.params = {percolator: {id: 1, body: {query: {multi_match: {query: "this is a test", fields: ["subject", "message"], use_dis_max: => true}}}}}
              new_params = controller.send(:percolator_params)
            end
        end

        context "bool queries" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"bool" => { "must" => { "term" => { "user" => "kimchy" } }, "must_not" => { "range" => { "age" => { "from" => 10, "to" => 20 } } }, "should" : [{"term" => { "tag" => "wow" }},{"term" => { "tag" => "elasticsearch" }}],"minimum_should_match" => 1}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "common term alternative" do
              controller.params = {percolator: {id: 1, body: {query: {"bool"=> { "must"=> [ { "term"=> { "body"=> "nelly"}}, { "term"=> { "body"=> "elephant"}}, { "term"=> { "body"=> "cartoon"}}],"should"=> [{ "term"=> { "body"=> "the"}}, { "term"=> { "body"=> "as"}},{ "term"=> { "body"=> "a"}}], "minimum_should_match"=> 2}}}}}
              new_params = controller.send(:percolator_params)
            end

        end


        context "common queries" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"common" => {"body" => {"query" => "nelly the elephant as a cartoon", "cutoff_frequency" => 0.001, "low_freq_operator" => "and", "minimum_should_match"=> 2}}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "minimum_should_match with low and high freq" do
              controller.params = {percolator: {id: 1, body: {query: {"common" => {"body" => {"query" => "nelly the elephant as a cartoon", "cutoff_frequency" => 0.001, "low_freq_operator" => "and", "minimum_should_match"=> {"low_freq" => 2, "high_freq" => 3}}}}}}}}
              new_params = controller.send(:percolator_params)
            end
        end

        context "dis max queries" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: { "dis_max" => {"tie_breaker" => 0.7, "queries" => [{"term" => { "age" => 34 }}, { "term" => { "age" => 35 }}]}}}}}
              new_params = controller.send(:percolator_params)
            end
        end
        
        context "match_all query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"match_all" : {}}}}}
              new_params = controller.send(:percolator_params)
            end
        end

        context "prefix query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"prefix" => { "user" => "ki" }}}}}
              new_params = controller.send(:percolator_params)
            end
            it "long form" do
              controller.params = {percolator: {id: 1, body: {query: {"prefix" => { "user" => {"prefix" => "ki"} }}}}}
              new_params = controller.send(:percolator_params)
            end            
        end     

        
        context "query_string query" do
            it "default_field" do
              controller.params = {percolator: {id: 1, body: {query: {"query_string" => { "default_field" => "content", "query" => "this AND that OR thus", "default_operator" => "OR", "allow_leading_wildcard" => true }}}}}
              new_params = controller.send(:percolator_params)
            end
            it "multi_field" do
              controller.params = {percolator: {id: 1, body: {query: {"query_string" => { "fields" => ["content", "name"], "query" => "this AND that OR thus", "use_dis_max" => true }}}}}
              new_params = controller.send(:percolator_params)
            end       
        end

        context "range query" do
            it "gte and lte" do
              controller.params = {percolator: {id: 1, body: {query: {"range" => {"age" => {"gte" => 10,"lte" => 20}}}}}}}
              new_params = controller.send(:percolator_params)
            end
            it "gt and lt" do
              controller.params = {percolator: {id: 1, body: {query: {"range" => {"age" => {"gt" => 10,"lt" => 20}}}}}}}
              new_params = controller.send(:percolator_params)
            end  
        end

        context "span first query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"span_first" => {"match" => {"span_term" => { "user" => "kimchy" }},"end" => 3}}}}}
              new_params = controller.send(:percolator_params)
            end
        end  

        context "span-multi query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"span_multi" => {"match" => {"prefix" => { "user" =>  { "value" => "ki" } }}}}}}}
              new_params = controller.send(:percolator_params)
            end
        end

        context "span-near query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"span_near" => {"clauses" => [{ "span_term" => { "field" => "value1" } },{ "span_term" => { "field" => "value2" } },{ "span_term" => { "field" => "value3" } }],"slop" => 12,"in_order" => false,"collect_payloads" => false}}}}}
              new_params = controller.send(:percolator_params)
            end
        end


        context "span-not query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"span_not" => {"include" => {"span_term" => { "field1" => "value1" }},"exclude" => {"span_term" => { "field2" => "value2" }}}}}}}
              new_params = controller.send(:percolator_params)
            end
        end 

        context "span-or query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"span_or" => {"clauses" => [{ "span_term" => { "field" => "value1" } },{ "span_term" => { "field" => "value2" } },{ "span_term" => { "field" => "value3" } }]}}}}}
              new_params = controller.send(:percolator_params)
            end
        end

        context "span-term query" do
            it "default" do
              controller.params = {percolator: {id: 1, body: {query: {"span_term" => { "user" => "kimchy" }}}}}
              new_params = controller.send(:percolator_params)
            end

            it "long form" do
              controller.params = {percolator: {id: 1, body: {query: {"span_term" => { "user" => { "term" => "kimchy"} }}}}}
              new_params = controller.send(:percolator_params)
            end            
        end          

        context "term queries" do
          it "with key value pairs" do
            controller.params = {percolator: {id: 1, body: {query: {term: {user: "kimchy"}}}}}
            new_params = controller.send(:percolator_params)
          end

          it "with a key and a value" do
            controller.params = {percolator: {id: 1, body: {query: {term: {user: {value: "kimchy"}}}}}}
            new_params = controller.send(:percolator_params)
          end
        end

        context "terms queries" do
          it "with array of values" do
            controller.params = {percolator: {id: 1, body: {query: {terms: {tags: [ "blue", "pill" ], minimum_should_match: 1}}}}}
            new_params = controller.send(:percolator_params)
          end

          it "with array of values using `in` alias" do
            controller.params = {percolator: {id: 1, body: {query: {in: {tags: [ "blue", "pill" ], minimum_should_match: 1}}}}}
            new_params = controller.send(:percolator_params)
          end
        end

      end

    end
end

