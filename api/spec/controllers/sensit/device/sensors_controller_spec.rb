require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Sensit
    describe Device::SensorsController do


      def valid_request(h = {})
        h.merge!({:sensor_id => "1", :use_route => :sensit_api, :format => "json", :api_version => 1})        
      end
      # This should return the minimal set of attributes required to create a valid
      # Device::Sensor. As you add validations to Device::Sensor, be sure to
      # update the return value of this method accordingly.
      def valid_attributes
        { "unit_id" => "1" }
      end

      # This should return the minimal set of values that should be in the session
      # in order to pass any filters (e.g. authentication) defined in
      # Device::SensorsController. Be sure to keep this updated too.
      def valid_session
        {}
      end

      describe "GET index" do
        it "assigns all device_sensors as @device_sensors" do
          sensor = Device::Sensor.create! valid_attributes
          get :index, valid_request, valid_session
          assigns(:sensors).should eq([sensor])
        end
      end

      describe "GET show" do
        it "assigns the requested device_sensor as @device_sensor" do
          sensor = Device::Sensor.create! valid_attributes
          get :show, valid_request({:id => sensor.to_param}), valid_session
          assigns(:sensor).should eq(sensor)
        end
      end

      describe "POST create" do
        describe "with valid params" do
          it "creates a new Device::Sensor" do
            expect {
              post :create, valid_request({:device_sensor => valid_attributes}), valid_session
            }.to change(Device::Sensor, :count).by(1)
          end

          it "assigns a newly created device_sensor as @device_sensor" do
            post :create, valid_request({:device_sensor => valid_attributes}), valid_session
            assigns(:sensor).should be_a(Device::Sensor)
            assigns(:sensor).should be_persisted
          end

          it "redirects to the created device_sensor" do
            post :create, valid_request({:device_sensor => valid_attributes}), valid_session
            response.should render_template("sensit/device/sensors/show")
          end
        end

        describe "with invalid params" do
          it "assigns a newly created but unsaved device_sensor as @device_sensor" do
            # Trigger the behavior that occurs when invalid params are submitted
            Device::Sensor.any_instance.stub(:save).and_return(false)
            post :create, valid_request({:device_sensor => { "unit_id" => "invalid value" }}), valid_session
            assigns(:sensor).should be_a_new(Device::Sensor)
          end

          it "re-renders the 'new' template" do
            # Trigger the behavior that occurs when invalid params are submitted
            Device::Sensor.any_instance.stub(:save).and_return(false)
            post :create, valid_request({:device_sensor => { "unit_id" => "invalid value" }}), valid_session
            response.should render_template("sensit/device/sensors/show")
          end
        end
      end

      describe "PUT update" do
        describe "with valid params" do
          it "updates the requested device_sensor" do
            sensor = Device::Sensor.create! valid_attributes
            # Assuming there are no other device_sensors in the database, this
            # specifies that the Device::Sensor created on the previous line
            # receives the :update_attributes message with whatever params are
            # submitted in the request.
            Device::Sensor.any_instance.should_receive(:update).with({ "unit_id" => "1" })
            put :update, valid_request({:id => sensor.to_param, :device_sensor => { "unit_id" => "1" }}), valid_session
          end

          it "assigns the requested device_sensor as @device_sensor" do
            sensor = Device::Sensor.create! valid_attributes
            put :update, valid_request({:id => sensor.to_param, :device_sensor => valid_attributes}), valid_session
            assigns(:sensor).should eq(sensor)
          end

          it "redirects to the device_sensor" do
            sensor = Device::Sensor.create! valid_attributes
            put :update, valid_request({:id => sensor.to_param, :device_sensor => valid_attributes}), valid_session
            response.should render_template("sensit/device/sensors/show")
          end
        end

        describe "with invalid params" do
          it "assigns the device_sensor as @device_sensor" do
            sensor = Device::Sensor.create! valid_attributes
            # Trigger the behavior that occurs when invalid params are submitted
            Device::Sensor.any_instance.stub(:save).and_return(false)
            put :update, valid_request({:id => sensor.to_param, :device_sensor => { "unit_id" => "invalid value" }}), valid_session
            assigns(:sensor).should eq(sensor)
          end

          it "re-renders the 'edit' template" do
            sensor = Device::Sensor.create! valid_attributes
            # Trigger the behavior that occurs when invalid params are submitted
            Device::Sensor.any_instance.stub(:save).and_return(false)
            put :update, valid_request({:id => sensor.to_param, :device_sensor => { "unit_id" => "invalid value" }}), valid_session
            response.should render_template("sensit/device/sensors/show")
          end
        end
      end

      describe "DELETE destroy" do
        it "destroys the requested device_sensor" do
          sensor = Device::Sensor.create! valid_attributes
          expect {
            delete :destroy, valid_request({:id => sensor.to_param}), valid_session
          }.to change(Device::Sensor, :count).by(-1)
        end

        it "redirects to the device_sensors list" do
          sensor = Device::Sensor.create! valid_attributes
          delete :destroy, valid_request({:id => sensor.to_param}), valid_session
          response.status.should == 204
        end
      end

    end
end
