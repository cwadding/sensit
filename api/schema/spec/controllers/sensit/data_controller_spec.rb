require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Sensit
  describe DataController do

      before(:each) do
        controller.stub(:doorkeeper_token).and_return(@access_grant)
      end

      def valid_request(h = {})
        {:use_route => :sensit_api, :format => "json", :api_version => 1}.merge!(h)
      end
      # This should return the minimal set of attributes required to create a valid
      # ::Sensit::Topic::Feed. As you add validations to ::Sensit::Topic::Feed, be sure to
      # update the return value of this method accordingly.
      def valid_attributes
        { key: "my_key", value: "123"}
      end

      # This should return the minimal set of values that should be in the session
      # in order to pass any filters (e.g. authentication) defined in
      # ::Sensit::Topic::FeedsController. Be sure to keep this updated too.
      def valid_session
        {}
      end

    # describe "GET show" do
    #   it "assigns the requested data as @data" do
    #     datum = ::Sensit::Topic::Feed.create valid_attributes
    #     get :show, valid_request({:id => datum.to_param}), valid_session
    #     assigns(:data).should eq(datum)
    #   end
    # end

    # describe "PUT update" do
    #   describe "with valid params" do
    #     it "updates the requested data" do
    #       datum = ::Sensit::Topic::Feed.create valid_attributes
    #       # Assuming there are no other data in the database, this
    #       # specifies that the Topic::Feed::DataRow created on the previous line
    #       # receives the :update_attributes message with whatever params are
    #       # submitted in the request.
    #       ::Sensit::Topic::Feed.any_instance.should_receive(:update).with({ "value" => "456" })
    #       put :update, valid_request({:id => datum.to_param, :values => { "value" => "456" }}), valid_session
    #     end

    #     it "assigns the requested data as @data" do
    #       datum = ::Sensit::Topic::Feed.create valid_attributes
    #       put :update, valid_request({:id => datum.to_param, :values => valid_attributes}), valid_session
    #       assigns(:data).should eq(datum)
    #     end

    #     it "redirects to the data" do
    #       datum = ::Sensit::Topic::Feed.create valid_attributes
    #       put :update, valid_request({:id => datum.to_param, :values => valid_attributes}), valid_session
    #       response.should render_template("sensit/data/show")
    #     end
    #   end

    #   describe "with invalid params" do
    #     it "assigns the data as @data" do
    #       datum = ::Sensit::Topic::Feed.create valid_attributes
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       ::Sensit::Topic::Feed::DataRow.any_instance.stub(:save).and_return(false)
    #       put :update, valid_request({:id => datum.to_param, :values => { "value" => "456" }}), valid_session
    #       assigns(:data).should eq(datum)
    #     end

    #     it "re-renders the 'edit' template" do
    #       datum = ::Sensit::Topic::Feed::DataRow.create! valid_attributes
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       ::Sensit::Topic::Feed.any_instance.stub(:save).and_return(false)
    #       put :update, valid_request({:id => datum.to_param, :values => { "value" => "456"  }}), valid_session
    #       response.should render_template("sensit/data/show")
    #     end
    #   end
    # end

  end
end
