require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Sensit
  describe PublicationsController do

    before(:each) do
      @access_grant = FactoryGirl.create(:access_grant, resource_owner_id: @user.id, scopes: "read_any_publications manage_any_publications")
      controller.stub(:doorkeeper_token).and_return(@access_grant)
      @topic = FactoryGirl.create(:topic_with_feeds, user: @user, application: @access_grant.application)
    end

    def valid_request(h = {})
      h.merge!({:use_route => :sensit_api, :format => "json", :api_version => 1})
    end
    # This should return the minimal set of attributes required to create a valid
    # ::Sensit::Topic::Feed. As you add validations to ::Sensit::Topic::Feed, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      { :host => "127.0.0.1", :protocol => "mqtt"}
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ::Sensit::Topic::FeedsController. Be sure to keep this updated too.
    def valid_session(params = {})
      {}.merge!(params)
    end

    describe "GET index" do
      it "assigns all publications as @publications" do
        publication = FactoryGirl.create(:publication, :topic => @topic)
        get :index, valid_request({:topic_id => @topic.to_param}), valid_session(user_id: @user.to_param)
        assigns(:publications).should eq([publication])
      end
    end

    describe "GET show" do
      before(:each) do
        @publication = FactoryGirl.create(:publication, :topic => @topic)
      end
      it "assigns the requested publication as @publication" do
        
        get :show, valid_request({:topic_id => @topic.to_param, :id => @publication.to_param}), valid_session(user_id: @user.to_param)
        assigns(:publication).should eq(@publication)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Topic::Publication" do
          expect {
            post :create, valid_request({:topic_id => @topic.to_param, :publication => valid_attributes}), valid_session(user_id: @user.to_param)
          }.to change(Topic::Publication, :count).by(1)
        end

        it "assigns a newly created publication as @publication" do
          post :create, valid_request({:topic_id => @topic.to_param, :publication => valid_attributes}), valid_session(user_id: @user.to_param)
          assigns(:publication).should be_a(Topic::Publication)
          assigns(:publication).should be_persisted
        end

        it "redirects to the created publication" do
          post :create, valid_request({:topic_id => @topic.to_param, :publication => valid_attributes}), valid_session(user_id: @user.to_param)
          response.should render_template("sensit/publications/show")
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved publication as @publication" do
          # Trigger the behavior that occurs when invalid params are submitted
          ::Sensit::Topic::Publication.any_instance.stub(:save).and_return(false)
          post :create, valid_request({:topic_id => @topic.to_param, :publication => { :host => "127.0.0.1", :protocol => "mqtt"}}), valid_session(user_id: @user.to_param)
          assigns(:publication).should be_a_new(::Sensit::Topic::Publication)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Topic::Publication.any_instance.stub(:save).and_return(false)
          post :create, valid_request({:topic_id => @topic.to_param, :publication => { :host => "127.0.0.1", :protocol => "mqtt"}}), valid_session(user_id: @user.to_param)
          response.status.should == 422
        end
      end
    end

    describe "PUT update" do
      before(:each) do
        @publication = FactoryGirl.create(:publication, :topic => @topic)
      end
      describe "with valid params" do
        it "updates the requested publication" do
          ::Sensit::Topic::Publication.any_instance.should_receive(:update).with({ "host" => "127.0.0.1", "protocol" => "mqtt"} )
          put :update, valid_request({:id => @publication.to_param, :topic_id => @topic.to_param, :publication => { :host => "127.0.0.1", :protocol => "mqtt"}}), valid_session(user_id: @user.to_param)
        end

        it "assigns the requested publication as @publication" do
          put :update, valid_request({:id => @publication.to_param, :topic_id => @topic.to_param, :publication => valid_attributes}), valid_session(user_id: @user.to_param)
          assigns(:publication).should eq(@publication)
        end

        it "redirects to the publication" do
          put :update, valid_request({:id => @publication.to_param, :topic_id => @topic.to_param, :publication => valid_attributes}), valid_session(user_id: @user.to_param)
          response.should render_template("sensit/publications/show")
        end
      end

      describe "with invalid params" do
        it "assigns the publication as @publication" do
          ::Sensit::Topic::Publication.any_instance.stub(:save).and_return(false)
          put :update, valid_request({:id => @publication.to_param, :topic_id => @topic.to_param, :publication => { :host => "127.0.0.1", :protocol => "mqtt"}}), valid_session(user_id: @user.to_param)
          assigns(:publication).should eq(@publication)
        end

        it "re-renders the 'edit' template" do
          ::Sensit::Topic::Publication.any_instance.stub(:save).and_return(false)
          put :update, valid_request({:id => @publication.to_param, :topic_id => @topic.to_param, :publication => { :host => "127.0.0.1", :protocol => "mqtt"}}), valid_session(user_id: @user.to_param)
          response.status.should == 422
        end
      end
    end

    describe "DELETE destroy" do
      before(:each) do
        @publication = FactoryGirl.create(:publication, :topic => @topic)
      end
      it "destroys the requested publication" do
        expect {
          delete :destroy, valid_request({:topic_id => @topic.to_param, :id => @publication.to_param}), valid_session(user_id: @user.to_param)
        }.to change(Topic::Publication, :count).by(-1)
      end

      it "redirects to the publications list" do
        delete :destroy, valid_request({:topic_id => @topic.to_param, :id => @publication.to_param}), valid_session(user_id: @user.to_param)
        response.status.should == 204
      end
    end

    describe "#publication_params" do
      context "with uri" do
        it "it is valid and returns the same hash" do
          controller.params = {:publication => { :uri => "http://user:pass@localhost:80"}}
          new_params = controller.send(:publication_params)
          new_params.should == controller.params[:publication]
        end
      end
      context "with :host, :protocol, :username, :password, :port" do
        it "it is valid and returns the same hash" do
          controller.params = {:publication => { :host => "localhost", :protocol => "http", :username => "user", :password => "pass", :port => "88" }}
          new_params = controller.send(:publication_params)
          new_params.should == controller.params[:publication]
        end
      end      
    end

  end
end
