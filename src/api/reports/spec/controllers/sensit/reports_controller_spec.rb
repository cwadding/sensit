require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Sensit
  describe ReportsController do

    before(:each) do
      @access_grant = FactoryGirl.create(:access_grant, resource_owner_id: @user.id, scopes: "read_any_reports write_any_reports delete_any_reports")
      controller.stub(:doorkeeper_token).and_return(@access_grant)
      @topic = FactoryGirl.create(:topic_with_feeds, user: @user, application: @access_grant.application)
    end

    def valid_request(h = {})
      h.merge!({:use_route => :sensit_api, :format => "json", :api_version => 1})
    end
    # This should return the minimal set of attributes required to create a valid
    # ::Sensit::Topic::Feed. As you add validations to ::Sensit::Topic::Feed, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      { :name => "My Report", :query => {"match_all" => {  }}, :facets => [{"name" => "facet1", "query" => { :terms => { :field => "value1"}}}]}
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # ::Sensit::Topic::FeedsController. Be sure to keep this updated too.
    def valid_session(params = {})
      {}.merge!(params)
    end

    describe "GET index" do
      it "assigns all reports as @reports" do
        report = FactoryGirl.create(:report, :topic => @topic)
        get :index, valid_request({:topic_id => @topic.to_param}), valid_session(user_id: @user.to_param)
        assigns(:reports).should eq([report])
      end
    end

    describe "GET show" do
      before(:each) do
        @report = FactoryGirl.create(:report, :topic => @topic)
      end
      it "assigns the requested report as @report" do
        
        get :show, valid_request({:topic_id => @topic.to_param, :id => @report.to_param}), valid_session(user_id: @user.to_param)
        assigns(:report).should eq(@report)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Topic::Report" do
          expect {
            post :create, valid_request({:topic_id => @topic.to_param, :report => valid_attributes}), valid_session(user_id: @user.to_param)
          }.to change(Topic::Report, :count).by(1)
        end

        it "assigns a newly created report as @report" do
          post :create, valid_request({:topic_id => @topic.to_param, :report => valid_attributes}), valid_session(user_id: @user.to_param)
          assigns(:report).should be_a(Topic::Report)
          assigns(:report).should be_persisted
        end

        it "redirects to the created report" do
          post :create, valid_request({:topic_id => @topic.to_param, :report => valid_attributes}), valid_session(user_id: @user.to_param)
          response.should render_template("sensit/reports/show")
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved report as @report" do
          # Trigger the behavior that occurs when invalid params are submitted
          ::Sensit::Topic::Report.any_instance.stub(:save).and_return(false)
          post :create, valid_request({:topic_id => @topic.to_param, :report => { "name" => "invalid value", :query => {"match_all" => {  }}, :facets => [{"name" => "facet1", "query" => { :terms => { :field => "value1"}}}]}}), valid_session(user_id: @user.to_param)
          assigns(:report).should be_a_new(::Sensit::Topic::Report)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Topic::Report.any_instance.stub(:save).and_return(false)
          post :create, valid_request({:topic_id => @topic.to_param, :report => { "name" => "invalid value", :query => {"match_all" => {  }}, :facets => [{"name" => "facet1", "query" => { :terms => { :field => "value1"}}}]}}), valid_session(user_id: @user.to_param)
          response.status.should == 422
        end
      end
    end

    describe "PUT update" do
      before(:each) do
        @report = FactoryGirl.create(:report, :topic => @topic)
      end
      describe "with valid params" do
        it "updates the requested report" do
          ::Sensit::Topic::Report.any_instance.should_receive(:update).with({ "name" => "MyString", "query" => {"match_all" => {  }}} )
          put :update, valid_request({:id => @report.to_param, :topic_id => @topic.to_param, :report => { "name" => "MyString", :query => {"match_all" => {  }}, :facets => [{"name" => "facet1", "query" => { :terms => { :field => "value1"}}}] }}), valid_session(user_id: @user.to_param)
        end

        it "assigns the requested report as @report" do
          put :update, valid_request({:id => @report.to_param, :topic_id => @topic.to_param, :report => valid_attributes}), valid_session(user_id: @user.to_param)
          assigns(:report).should eq(@report)
        end

        it "redirects to the report" do
          put :update, valid_request({:id => @report.to_param, :topic_id => @topic.to_param, :report => valid_attributes}), valid_session(user_id: @user.to_param)
          response.should render_template("sensit/reports/show")
        end
      end

      describe "with invalid params" do
        it "assigns the report as @report" do
          ::Sensit::Topic::Report.any_instance.stub(:save).and_return(false)
          put :update, valid_request({:id => @report.to_param, :topic_id => @topic.to_param, :report => { "name" => "invalid value", :query => {"match_all" => {  }} }, :facets => [{"name" => "facet1", "query" => { :terms => { :field => "value1"}}}]}), valid_session(user_id: @user.to_param)
          assigns(:report).should eq(@report)
        end

        it "re-renders the 'edit' template" do
          ::Sensit::Topic::Report.any_instance.stub(:save).and_return(false)
          put :update, valid_request({:id => @report.to_param, :topic_id => @topic.to_param, :report => { "name" => "invalid value", :query => {"match_all" => {  }} }, :facets => [{"name" => "facet1", "query" => { :terms => { :field => "value1"}}}]}), valid_session(user_id: @user.to_param)
          response.status.should == 422
        end
      end
    end

    describe "DELETE destroy" do
      before(:each) do
        @report = FactoryGirl.create(:report, :topic => @topic)
      end
      it "destroys the requested report" do
        expect {
          delete :destroy, valid_request({:topic_id => @topic.to_param, :id => @report.to_param}), valid_session(user_id: @user.to_param)
        }.to change(Topic::Report, :count).by(-1)
      end

      it "redirects to the reports list" do
        delete :destroy, valid_request({:topic_id => @topic.to_param, :id => @report.to_param}), valid_session(user_id: @user.to_param)
        response.status.should == 204
      end
    end

            

    describe ".report_params" do
      after(:each) do
        @new_params.should == controller.params[:report]
      end
      # context "terms facet" do
      #   it "ordering" do
      #     controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{ "name" => "tag", "body" => { "terms" => {"field" => "tag","size" => 10, "order" => "term"}} }]}}
      #     @new_params = controller.send(:report_params)
      #   end
      #   it "all terms" do
      #     controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "body" => { "terms" => {"field" => "tag","all_terms" => true}} }]}}
      #     @new_params = controller.send(:report_params)
      #   end
      #   it "excluding terms" do
      #     controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "body" => { "terms" => {"field" => "tag","exclude" => ["term1", "term2"]}} }]}}
      #     @new_params = controller.send(:report_params)
      #   end
      #   it "regex" do
      #     controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "body" => { "terms" => {"field" => "tag","regex" => "_regex expression here_", "regex_flags" => "DOTALL"}} }]}}
      #     @new_params = controller.send(:report_params)
      #   end  
      #   it "term scripts" do
      #     controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "body" => { "terms" => {"field" => "tag","size" => 10, "script" => "term + 'aaa'"}} }]}}
      #     @new_params = controller.send(:report_params)
      #   end
      #   it "multi fields" do
      #     controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "body" => { "terms" => {"fields" => ["tag1", "tag2"],"size" => 10}} }]}}
      #     @new_params = controller.send(:report_params)
      #   end 
      # end     
    end


    describe ".facets_params" do
      after(:each) do
        @new_params.should == controller.params[:report][:facets]
      end
      context "terms facet" do
        it "ordering" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{ "name" => "tag", "query" => { "terms" => {"field" => "tag","size" => 10, "order" => "term"}} }]}}
          @new_params = controller.send(:facets_params)
        end
        it "all terms" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "query" => { "terms" => {"field" => "tag","all_terms" => true}} }]}}
          @new_params = controller.send(:facets_params)
        end
        it "excluding terms" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "query" => { "terms" => {"field" => "tag","exclude" => ["term1", "term2"]}} }]}}
          @new_params = controller.send(:facets_params)
        end
        it "regex" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "query" => { "terms" => {"field" => "tag","regex" => "_regex expression here_", "regex_flags" => "DOTALL"}} }]}}
          @new_params = controller.send(:facets_params)
        end  
        it "term scripts" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "query" => { "terms" => {"field" => "tag","size" => 10, "script" => "term + 'aaa'"}} }]}}
          @new_params = controller.send(:facets_params)
        end
        it "multi fields" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {  }}, :facets => [{  "name" => "tag", "query" => { "terms" => {"fields" => ["tag1", "tag2"],"size" => 10}} }]}}
          @new_params = controller.send(:facets_params)
        end 
      end
      context "range facets" do
        it "default Option 1" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "range1", "query" => {"range" => {"field" => "field_name","ranges" => [{ "to" => 50 },{ "from" => 20, "to" => 70 },{ "from" => 70, "to" => 120 },{ "from" => 150 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end

        it "default Option 2" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "range1", "query" =>  {"range" => {"my_field" => [{ "to" => 50 },{ "from" => 20, "to" => 70 },{ "from" => 70, "to" => 120 },{ "from" => 150 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end

        it "key and value" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "range1", "query" =>  {"range" => {"key_field" => "field_name","value_field" => "another_field_name","ranges" => [{ "to" => 50 },{ "from" => 20, "to" => 70 },{ "from" => 70, "to" => 120 },{ "from" => 150 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end

        it "script key and value" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "range1", "query" =>  {"range" => {"key_script" => "doc['date'].date.minuteOfHour","value_script" => "doc['value1'].value","ranges" => [{ "to" => 50 },{ "from" => 20, "to" => 70 },{ "from" => 70, "to" => 120 },{ "from" => 150 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end
      end
      context "histogram facets" do
        it "integer interval" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "histo1", "query" => {"histogram" => {"field" => "field_name","interval" => 100}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "key and value" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "histo1", "query" =>{"histogram" => {"key_field" => "key_field_name","value_field" => "value_field_name","interval" => 100}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "script key and value" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "histo1", "query" => {"histogram" => {"key_script" => "doc['date'].date.minuteOfHour","value_script" => "doc['value1'].value","interval" => 100}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "script key and value with params" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "histo1", "query" => {"histogram" => {"key_script" => "doc['date'].date.minuteOfHour*factor1","value_script" => "doc['value1'].value+factor2","params" => {"factor1" => 2, "factor2" => 3},"interval" => 100}}}]}}
          @new_params = controller.send(:facets_params)
        end
      end
      context "date histogram facet" do
        # ["year", "quarter", "month", "week", "day", "hour", "minute"]
        it "integer interval" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "histo1", "query" => {"date_histogram" => {"field" => "field_name","interval" => "day"}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "key and value" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "histo1", "query" => {"date_histogram" => {"key_field" => "timestamp","value_field" => "price","interval" => "day"}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "script key and value" do
          controller.params = {:report => { "name" => "invalid value",  "query" => {"match_all" => {}},"facets" => [{"name" => "histo1", "query" => {"date_histogram" => {"key_field" => "timestamp","value_script" => "doc['price'].value * 2","interval" => "day"}}}]}}
          @new_params = controller.send(:facets_params)
        end
      end
      context "filter facets" do
        it "filter" do
          controller.params = {:report => { "name" => "invalid value","facets" => [{"name" => "wow_facet", "query" =>{"filter" => {"term" => { "tag" => "wow" }}}}]}}
          @new_params = controller.send(:facets_params)
        end
      end
      context "query facets" do
        it "query" do
          controller.params = {:report => { "name" => "invalid value","facets" => [{"name" => "wow_facet", "query" => {"query" => {"term" => { "tag" => "wow" }}}}]}}
          @new_params = controller.send(:facets_params)
        end
      end

      context "terms facets" do
        it "field" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "stat1", "query" =>  {"terms" => {"field" => "value1"}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "script" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "stat1", "query" =>  {"terms" => {"script" => "doc['value1'].value + doc['num2'].value"}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "script with params" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "stat1", "query" =>  {"terms" => {"script" => "(doc['value1'].value + doc['num2'].value) * factor", "params" => {"factor" => 5}}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "multi field" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "stat1", "query" =>  {"terms" => {"fields" => ["value1", "num2"]}}}]}}
          @new_params = controller.send(:facets_params)
        end
      end

      context "terms stats facets" do
        it "field" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "tag_price_stats", "query" => {"terms_stats" => {"key_field" => "tag","value_field" => "price"}}}]}}
          @new_params = controller.send(:facets_params)
        end  
        # order => ["term", "reverse_term", "count", "reverse_count", "total", "reverse_total", "min", "reverse_min", "max", "reverse_max", "mean", "reverse_mean"]
        it "field with size and order" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "tag_price_stats", "query" => {"terms_stats" => {"key_field" => "tag","value_field" => "price", "size" => 10, "order" => "count"}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "script with params" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "tag_price_stats", "query" => {"terms_stats" => {"key_field" => "tag", "value_script" => "(doc['price'].value * factor", "params" => {"factor" => 5}}}}]}}
          @new_params = controller.send(:facets_params)
        end
      end

      context "geo distance facets" do
        it "lat lon as properties" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "geo1", "query" => {"geo_distance" => {"pin.location" => {"lat" => 40,"lon" => -70},"ranges" => [{ "to" => 10 },{ "from" => 10, "to" => 20 },{ "from" => 20, "to" => 100 },{ "from" => 100 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end
        it "lat lon as array" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "geo1", "query" =>  {"geo_distance" => {"pin.location" => [40,-70],"ranges" => [{ "to" => 10 },{ "from" => 10, "to" => 20 },{ "from" => 20, "to" => 100 },{ "from" => 100 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end

        it "lat lon as string" do
          # or geo hash "drm3btev3e86"
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "geo1", "query" =>  {"geo_distance" => {"pin.location" => "40,-70","ranges" => [{ "to" => 10 },{ "from" => 10, "to" => 20 },{ "from" => 20, "to" => 100 },{ "from" => 100 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end

        it "lat lon as string with unit and distance_type" do
          # "unit" => [mi, miles, in, inch, yd, yards, kilometers, mm, millimeters, cm, centimeters, m, meters]
          # "distance_type" => [arc (better precision), sloppy_arc (faster) or plane (fastest)]
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "geo1", "query" =>  {"geo_distance" => {"pin.location" => "40,-70","ranges" => [{ "to" => 10 },{ "from" => 10, "to" => 20 },{ "from" => 20, "to" => 100 },{ "from" => 100 }], "unit" => "mi", "distance_type" => "arc"}}}]}}
          @new_params = controller.send(:facets_params)
        end

        it "lat lon as string with value_field" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "geo1", "query" =>  {"geo_distance" => {"pin.location" => "40,-70", "value_field" => "value1", "ranges" => [{ "to" => 10 },{ "from" => 10, "to" => 20 },{ "from" => 20, "to" => 100 },{ "from" => 100 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end

        it "lat lon as string with value_script" do
          controller.params = {:report => { "name" => "invalid value", "query" => {"match_all" => {}},"facets" => [{"name" => "geo1", "query" => {"geo_distance" => {"pin.location" => "40,-70", "value_script" => "doc['value1'].value * factor","params" => {"factor" => 5}, "ranges" => [{ "to" => 10 },{ "from" => 10, "to" => 20 },{ "from" => 20, "to" => 100 },{ "from" => 100 }]}}}]}}
          @new_params = controller.send(:facets_params)
        end
        
      end      
    end


  end
end
