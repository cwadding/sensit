require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Settings::SmtpController do
  login_user
  # This should return the minimal set of attributes required to create a valid
  # Smtp. As you add validations to Smtp, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :email_address => 'foo@bar.com',
      :server => 'gmail.smtp.com',
      :port => 30,
      :username => 'whoami',
      :password => 'password',
      :password_confirmation => 'password'
    }
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SmtpsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET show" do
    it "assigns the requested smtp as @smtp" do
      get :show,{}, valid_session
      assigns(:smtp).should be_a(Smtp)
    end
  end
  
  describe "POST test" do

    # def test
    #   @smtp = Smtp.new
    #   respond_to do |format|
    #     if UserMailer.test(params[:to_address]).deliver
    #       format.html { redirect_to smtp_url, notice: "Email succussfully sent."}
    #     else
    #       format.html { redirect_to "show", notice: "Unable to send email through SMTP settings."}
    #     end
    #   end
    # end

    context "with successful delivery" do
      before(:each) do
        UserMailer.stub_chain(:test, :deliver).and_return(true)
      end
      it "assigns the requested smtp as @smtp" do
        get :test,{:to_address => "address@example.com"}, valid_session
        assigns(:smtp).should be_a(Smtp)
      end
      it "re-renders the 'show' template" do
        post :create, {:to_address => "address@example.com"}, valid_session
        response.should render_template("show")
      end
    end
    
    context "with unsuccessful delivery" do
      before(:each) do
        UserMailer.stub_chain(:test, :deliver).and_return(false)
      end
      it "assigns the requested smtp as @smtp" do
        get :test,{}, valid_session
        assigns(:smtp).should be_a(Smtp)
      end
      it "re-renders the 'show' template" do
        post :create, {:smtp => {}}, valid_session
        response.should render_template("show")
      end
    end
    
  end

  describe "POST create" do
    context "with valid params" do
      before(:each) do
        Smtp.any_instance.stub(:save).and_return(true)
      end
      it "creates a new Smtp" do
        Smtp.any_instance.should_receive(:save)
        post :create, {:smtp => valid_attributes}, valid_session
      end

      it "assigns a newly created smtp as @smtp" do
        post :create, {:smtp => valid_attributes}, valid_session
        assigns(:smtp).should be_a(Smtp)
      end

      it "redirects to the created smtp" do
        post :create, {:smtp => valid_attributes}, valid_session
        response.should redirect_to(smtp_url)
      end
    end

    context "with invalid params" do
      before(:each) do
        Smtp.any_instance.stub(:save).and_return(false)
      end
      it "assigns a the new smtp as @smtp" do
        post :create, {:smtp => {}}, valid_session
        assigns(:smtp).should be_a(Smtp)
      end

      it "re-renders the 'show' template" do
        post :create, {:smtp => {}}, valid_session
        response.should render_template("show")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested smtp" do
      Smtp.should_receive(:destroy)
      delete :destroy, {}, valid_session
    end
    it "redirects to the settings_smtps list" do
      delete :destroy, {}, valid_session
      response.should redirect_to(smtp_url)
    end
    context "successful destroy" do
      it "sets the flash" do
        Smtp.stub(:destroy).and_return(true)
        delete :destroy, {}, valid_session
        controller.flash[:notice].should == I18n.t("flash.notice.one", model: Smtp.model_name.human, verb: "destroyed")
      end
    end
    context "unsuccessful destroy" do
      it "sets the flash" do
        Smtp.stub(:destroy).and_return(false)
        delete :destroy, {}, valid_session
        controller.flash[:error].should == I18n.t("flash.error", model: Smtp.model_name.human, verb: "destroyed")
      end
    end
  end

end
